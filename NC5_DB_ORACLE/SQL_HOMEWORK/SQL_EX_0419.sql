--1) 어제 만든 SCORE_STGR 테이블의 SNO 컬럼에 INDEX를 추가하세요.
CREATE INDEX SCORE_STGR_SNO
    ON SCORE_STGR (SNO)


--2) 어제 만든 ST_COURSEPF 테이블의 SNO, CNO, PNO 다중 컬럼에 INDEX를 추가하세요.
CREATE INDEX ST_COURSEPF_SNO_CNO_PNO
    ON ST_COURSEPF (SNO, CNO, PNO)


--

--뷰 이름은 자유
--1) 학생의 학점 4.5 만점으로 환산된 정보를 검색할 수 있는 뷰를 생성하세요.
CREATE OR REPLACE VIEW FOURSTU(SNAME, MAJOR, AVR)
AS
(
SELECT SNAME, MAJOR, round((AVR * 1.125), 2)
FROM STUDENT);
select *
from FOURSTU;
--2) 각 과목별 평균 점수를 검색할 수 있는 뷰를 생성하세요.
CREATE OR REPLACE VIEW AVGRE(MAJOR, RE)
AS
(
SELECT MAJOR, round(AVG(RESULT), 2) AS RE
FROM STUDENT
         JOIN SCORE S2 on STUDENT.SNO = S2.SNO
GROUP BY MAJOR)

select *
from AVGRE;
--3) 각 사원과 관리자의 이름을 검색할 수 있는 뷰를 생성하세요.
CREATE OR REPLACE VIEW EMMG(eno, ENAME, MGRNAME)
AS
(
SELECT ea.eno, EM.ENAME, EA.ENAME
FROM EMP EA
         JOIN (SELECT ENAME, MGR
               FROM EMP) EM
              ON EA.ENO = EM.MGR)

select *
from emmg;
--4) 각 과목별 기말고사 평가 등급(A~F)까지와 해당 학생 정보를 검색할 수 있는 뷰를 생성하세요.
CREATE OR REPLACE VIEW
    GRMA
            (
             sno,
             sname,
             MAJOR,
             result,
             GRADE
                )
AS
(
SELECT s2.sno, sname, MAJOR, RESULT, GRADE
FROM SCGRADE,
     STUDENT
         join SCORE S2
              on STUDENT.SNO = S2.SNO
where RESULT between LOSCORE
          and HISCORE
    )

select *
from GRMA;

--5) 물리학과 교수의 과목을 수강하는 학생의 명단을 검색할 뷰를 생성하세요.
CREATE OR REPLACE VIEW MUL(SNAME, SECTION, PNAME)
AS
(
SELECT SNAME, SECTION, PNAME
FROM STUDENT
         JOIN SCORE S2 on STUDENT.SNO = S2.SNO
         JOIN COURSE C2 on S2.CNO = C2.CNO
         JOIN PROFESSOR P on C2.PNO = P.PNO
WHERE SECTION = '물리'
    )

select *
from MUL;

--

--1) 4.5 환산 평점이 가장 높은 3인의 학생을 검색하세요.
SELECT ROWNUM, A.SNAME, A.AAA
FROM (SELECT SNAME, ROUND(AVG(AVR * 1.125), 2) AS AAA
      FROM STUDENT
      group by SNAME
      ORDER BY AAA DESC) A
WHERE ROWNUM <= 3

--2) 기말고사 과목별 평균이 높은 3과목을 검색하세요.
SELECT ROWNUM, A.MAJOR, A.RES
FROM (SELECT MAJOR, ROUND(AVG(RESULT), 2) AS RES
      FROM STUDENT
               JOIN SCORE S2 on STUDENT.SNO = S2.SNO
      GROUP BY MAJOR
      ORDER BY RES DESC) A
WHERE ROWNUM <= 3

--3) 학과별, 학년별, 기말고사 평균이 순위 3까지를 검색하세요.(학과, 학년, 평균점수 검색)
SELECT ROWNUM, A.SYEAR, A.MAJOR, A.RES
FROM (SELECT SYEAR, MAJOR, ROUND(AVG(RESULT), 2) AS RES
      FROM STUDENT
               JOIN SCORE S2 on STUDENT.SNO = S2.SNO
      GROUP BY MAJOR, SYEAR
      ORDER BY RES DESC) A
WHERE ROWNUM <= 3

--4) 기말고사 성적이 높은 과목을 담당하는 교수 3인을 검색하세요.(교수이름, 과목명, 평균점수 검색)
SELECT ROWNUM, A.PNAME, A.CNAME, A.RES
FROM (SELECT PNAME, CNAME, ROUND(AVG(RESULT), 2) AS RES
      FROM PROFESSOR
               JOIN COURSE C2 on PROFESSOR.PNO = C2.PNO
               JOIN SCORE S2 on C2.CNO = S2.CNO
      GROUP BY PNAME, CNAME
      ORDER BY RES DESC) A
WHERE ROWNUM <= 3

--5) 교수별로 현재 수강중인 학생의 수를 검색하세요.
SELECT ROWNUM, PNAME, CO
FROM (SELECT PNAME, COUNT(*) AS CO
      FROM STUDENT
join SCORE S2 on STUDENT.SNO = S2.SNO
join COURSE C2 on S2.CNO = C2.CNO
join PROFESSOR P on C2.PNO = P.PNO
--                NATURAL JOIN PROFESSOR
      GROUP BY PNAME)

--
--1) CNO이 PK인 COURSE_PK 테이블을 생성하세요.(1번 방식으로)
CREATE TABLE COUSER_PK
(
    CNO    VARCHAR2(8) PRIMARY KEY,
    CNAME  VARCHAR2(20),
    ST_NUM NUMBER(1),
    PNO    VARCHAR2(8)
)

--2) PNO이 PK인 PROFESSOR_PK 테이블을 생성하세요.(2번 방식으로)
CREATE TABLE PROFESSOR_PK
(
    PNO      VARCHAR2(8) ,
    PNAME    VARCHAR2(20),
    SECTION  VARCHAR2(20),
    ORDERS   VARCHAR2(10),
    HIREDATE DATE,
    constraint PK_PNO PRIMARY KEY(PNO)
)

--3) PF_TEMP 테이블에 PNO을 PK로 추가하세요.
ALTER TABLE PF_TEMP
    ADD CONSTRAINT PK_TEMP_PNO PRIMARY KEY (PNO)


--4) COURSE_PROFESSOR 테이블에 CNO, PNO을 PK로 추가하세요.
ALTER TABLE COURSE_PROFESSOR
    ADD CONSTRAINT COURSE_PROFESSOR_CNO_PNO PRIMARY KEY (CNO, PNO)


--5) BOARD_NO(NUMBER)를 PK로 갖으면서 BOARD_TITLE(VARCHAR2(200)), BOARD_CONTENT(VARCHAR2(2000)),
--   BOARD_WRITER(VARCHAR2(20)), BOARD_FRGT_DATE(DATE), BOARD_LMDF_DATE(DATE)
--   컬럼을 갖는 T_BOARD 테이블을 생성하세요.

CREATE TABLE T_BOARD
(
    BOARD_NO        NUMBER PRIMARY KEY,
    BOARD_TITLE     VARCHAR2(200),
    BOARD_CONTENT   VARCHAR2(2000),
    BOARD_WRITER    VARCHAR2(20),
    BOARD_FRGT_DATE DATE,
    BOARD_LMDF_DATE DATE
)

--6) BOARD_NO(NUMBER), BOARD_FILE_NO(NUMBER)를 PK로 갖으면서 BOARD_FILE_NM(VARCHAR2(200)),
-- BOARD_FILE_PATH(VARCHAR2(2000)),
--   ORIGIN_FILE_NM(VARCHAR2(200)) 컬럼을 갖는 T_BOARD_FILE 테이블을 생성하세요.

CREATE TABLE T_BOARD_FILE
(
    BOARD_NO        NUMBER,
    BOARD_FILE_NO   NUMBER,
    BOARD_FILE_NM   VARCHAR2(200),
    BOARD_FILE_PATH VARCHAR2(2000),
    ORIGIN_FILE_NM  VARCHAR2(200),
    CONSTRAINT T_BOARD_FILE_PK PRIMARY KEY (BOARD_NO, BOARD_FILE_NO)
);